#include <Adafruit_NeoPixel.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define NUM_LEDS 48//Número de leds
#define PIN 11//Pino do arduino que os leds está ligado
#define DEBOUNCE_DELAY 50//Delay entre o pressionado do 
#define LED_BRIGHTNESS 50//Nível de luz da led
#define LONG_PRESS_DELAY 2000 // 2 segundos para confirmar
Adafruit_NeoPixel YagamyLight = Adafruit_NeoPixel(NUM_LEDS, PIN, NEO_RGB + NEO_KHZ800);//
LiquidCrystal_I2C lcd1(0x27, 20, 4);

String desafioContinuacaoContinuacao;
String desafioContinuacao;
const int botoes[4] = {2, 5, 6, 7};
bool estadoAtual[4] = {LOW, LOW, LOW, LOW};
bool ultimoEstado[4] = {LOW, LOW, LOW, LOW};
unsigned long ultimoTempoDebounce[4] = {0, 0, 0, 0};
int posJogador[4] = {0, 0, 0, 0};
int vezJogador = 0;
bool esperandoProximoJogador = false;
bool jogoEncerrado = false;
bool efeitoRGBAtivo = false;
int ledIndex1;
int ledIndex2;
int numJogadores = 2; // Default to 2 players
bool selecionandoJogadores = true; // Flag for player selection phase
unsigned long tempoPressionado = 0; // For long press detection

bool casaTextura(int pos) {
  return (pos == 7 || pos == 14 || pos == 21 || pos == 28);
}

void printCentered(String msg, int row) {
  msg.trim();
  lcd1.setCursor(0, row);
  lcd1.print("                    ");
  int len = msg.length();
  int col = (20 - len) / 2;
  if (col < 0) col = 0;
  lcd1.setCursor(col, row);
  lcd1.print(msg);
}

uint32_t interpolarCor(uint32_t cor1, uint32_t cor2, float t) {
  uint8_t r1 = (cor1 >> 16) & 0xFF;
  uint8_t g1 = (cor1 >> 8) & 0xFF;
  uint8_t b1 = cor1 & 0xFF;
  uint8_t r2 = (cor2 >> 16) & 0xFF;
  uint8_t g2 = (cor2 >> 8) & 0xFF;
  uint8_t b2 = cor2 & 0xFF;

  uint8_t r = r1 + (r2 - r1) * t;
  uint8_t g = g1 + (g2 - g1) * t;
  uint8_t b = b1 + (b2 - b1) * t;

  return YagamyLight.Color(r, g, b);
}

void setup() {
  Serial.begin(9600);
  YagamyLight.begin();
  YagamyLight.setBrightness(LED_BRIGHTNESS);
  YagamyLight.show();

  for (int i = 0; i < 4; i++) {
    pinMode(botoes[i], INPUT_PULLUP);
  }

  lcd1.init();
  lcd1.backlight();
  randomSeed(analogRead(0));

  // Start in player selection mode
  printCentered("Num Jogadores: 2", 0);
  printCentered("Botao 1: Muda", 1);
  printCentered("Segure o botao 2", 2);
  printCentered("para confirmae", 3);
}

void mostrarLedJogador(int jogador) {
  YagamyLight.clear();

  uint32_t cor;
  switch (jogador) {
    case 0: cor = YagamyLight.Color(10, 250, 10); break;   // Jogador 1: verde
    case 1: cor = YagamyLight.Color(255, 255, 20); break;  // Jogador 2: amarelo
    case 2: cor = YagamyLight.Color(15, 15, 215); break;   // Jogador 3: azul
    case 3: cor = YagamyLight.Color(215, 15, 15); break;   // Jogador 4: vermelho
  }

  for (int i = 0; i < 48; i++) {
    YagamyLight.setPixelColor(i, cor);
  }

  int casaAtual = posJogador[jogador];
  if (casaAtual > 0 && casaAtual <= 7) {
    ledIndex1 = 2 * (casaAtual - 1);
    ledIndex2 = 2 * (casaAtual - 1) + 1;
  } else if (casaAtual >= 8 && casaAtual <= 14) {
    ledIndex1 = 2 * (casaAtual - 2);
    ledIndex2 = 2 * (casaAtual - 2) + 1;
  } else if (casaAtual >= 15 && casaAtual <= 21) {
    ledIndex1 = 2 * (casaAtual - 3);
    ledIndex2 = 2 * (casaAtual - 3) + 1;
  } else if (casaAtual >= 22 && casaAtual <= 28) {
    ledIndex1 = 2 * (casaAtual - 4);
    ledIndex2 = 2 * (casaAtual - 4) + 1;
  }

  YagamyLight.setPixelColor(ledIndex1, YagamyLight.Color(255, 255, 255));
  YagamyLight.setPixelColor(ledIndex2, YagamyLight.Color(255, 255, 255));

  if (casaTextura(casaAtual)) {
    efeitoRGBAtivo = true;
  } else {
    efeitoRGBAtivo = false;
    YagamyLight.show();
  }
}

void efeitoRGBOndulatorio() {
  static unsigned long ultimoTempoRGB = 0;
  static float offset = 0;
  const int intervaloRGB = 50;
  const int comprimentoOnda = 12;
  const int passosTransicao = 10;

  if (millis() - ultimoTempoRGB >= intervaloRGB) {
    YagamyLight.clear();

    uint32_t coresRGB[4] = {
      YagamyLight.Color(255, 0, 0),
      YagamyLight.Color(0, 255, 0),
      YagamyLight.Color(0, 0, 255),
      YagamyLight.Color(255, 0, 0)
    };

    for (int i = 0; i < NUM_LEDS; i++) {
      float posicao = (i + offset) / (float)comprimentoOnda;
      int segmento = (int)posicao % 3;
      float t = posicao - (int)posicao;
      t = (int)(t * passosTransicao) / (float)passosTransicao;
      uint32_t cor = interpolarCor(coresRGB[segmento], coresRGB[segmento + 1], t);
      YagamyLight.setPixelColor(i, cor);
    }

    YagamyLight.show();
    offset = fmod(offset + 0.2, comprimentoOnda * 3);
    ultimoTempoRGB = millis();
  }
}

void jogarDado(int jogador) {
  for (int i = 0; i < 10; i++) {
    int temp = random(1, 7);
    lcd1.clear();
    printCentered("Rolando: " + String(temp), 1);
    YagamyLight.clear();
    int randomLed = random(0, NUM_LEDS);
    uint32_t cor;
    switch (jogador) {
      case 0: cor = YagamyLight.Color(200, 50, 50); break;
      case 1: cor = YagamyLight.Color(50, 200, 50); break;
      case 2: cor = YagamyLight.Color(50, 50, 200); break;
      case 3: cor = YagamyLight.Color(200, 200, 50); break;
    }
    YagamyLight.setPixelColor(randomLed, cor);
    YagamyLight.show();
    delay(70);
    YagamyLight.clear();
    YagamyLight.show();
  }

  int numero = random(1, 7);
  lcd1.clear();
  printCentered("Sorte: " + String(numero), 1);
  delay(800);

  posJogador[jogador] += numero;
  if (posJogador[jogador] > 29) {
    posJogador[jogador] = 29;
    lcd1.clear();
    printCentered(String("J") + String(jogador + 1) + " VENCEU!", 0);
    printCentered("J1: Resetar", 1);

    uint32_t cor;
    switch (jogador) {
      case 0: cor = YagamyLight.Color(10, 250, 10); break;   // Jogador 1: verde
      case 1: cor = YagamyLight.Color(255, 255, 20); break;  // Jogador 2: amarelo
      case 2: cor = YagamyLight.Color(15, 15, 215); break;   // Jogador 3: azul
      case 3: cor = YagamyLight.Color(215, 15, 15); break;   // Jogador 4: vermelho
    }
    for (int i = 0; i < 5; i++) {
      YagamyLight.fill(cor, 0, NUM_LEDS);
      YagamyLight.show();
      delay(300);
      YagamyLight.clear();
      YagamyLight.show();
      delay(300);
    }
    esperandoProximoJogador = false;
    jogoEncerrado = true;
    return;
  }
  Serial.println(posJogador[jogador]);

  lcd1.clear();
  printCentered(String("J") + String(jogador + 1) + " casa " + String(posJogador[jogador]), 0);

  if (casaTextura(posJogador[jogador])) {
    printCentered("Feche os olhos e", 1);
    printCentered("adivinhe a TEXTURA!", 2);
  } else {
    int idx = posJogador[jogador] - 1;
    if (idx >= 0 && idx < 28) {
      if (Serial.available() > 0) {
        String desafio = Serial.readString();
        if (desafio.length() > 20) {
          desafioContinuacao = desafio.substring(20, 40);
          if (desafio.length() > 40) {
            desafioContinuacaoContinuacao = desafio.substring(40, 60);
            printCentered(desafioContinuacaoContinuacao, 3);
          }
          desafio = desafio.substring(0, 20);
          printCentered(desafioContinuacao, 2);
        }
        printCentered(desafio, 1);
      }
    }
  }

  mostrarLedJogador(jogador);
}

void resetGame() {
  for (int i = 0; i < 4; i++) {
    posJogador[i] = 0;
  }
  vezJogador = 0;
  esperandoProximoJogador = false;
  jogoEncerrado = false;
  efeitoRGBAtivo = false;
  lcd1.clear();
  printCentered("Jogador 1 vez!", 0);
  printCentered("Aperte botao!", 1);
  YagamyLight.clear();
  YagamyLight.show();
  mostrarLedJogador(vezJogador);
}

void loop() {
  if (selecionandoJogadores) {
    static int tempNumJogadores = 2;
    bool leituraBotao1 = digitalRead(botoes[0]);
    bool leituraBotao2 = digitalRead(botoes[1]);

    if (leituraBotao1 != ultimoEstado[0]) {
      ultimoTempoDebounce[0] = millis();
    }
    if ((millis() - ultimoTempoDebounce[0]) > DEBOUNCE_DELAY) {
      if (leituraBotao1 != estadoAtual[0]) {
        estadoAtual[0] = leituraBotao1;
        if (estadoAtual[0] == LOW) {
          tempNumJogadores = (tempNumJogadores % 3) + 2; // Cycle between 2, 3, 4
          lcd1.clear();
          printCentered("Num Jogadores: " + String(tempNumJogadores), 0);
          printCentered("Botao 1: Muda", 1);
          printCentered("Botao 2: Confirma", 2);
        }
      }
    }
    ultimoEstado[0] = leituraBotao1;

    if (leituraBotao2 != ultimoEstado[1]) {
      ultimoTempoDebounce[1] = millis();
      if (leituraBotao2 == LOW) {
        tempoPressionado = millis();
      }
    }
    if (leituraBotao2 == LOW && (millis() - tempoPressionado) >= LONG_PRESS_DELAY) {
      numJogadores = tempNumJogadores;
      selecionandoJogadores = false;
      lcd1.clear();
      printCentered("Jogador 1 vez!", 0);
      printCentered("Aperte botao!", 1);
      mostrarLedJogador(vezJogador);
    }
    ultimoEstado[1] = leituraBotao2;
    return;
  }

  if (efeitoRGBAtivo && esperandoProximoJogador && !jogoEncerrado) {
    efeitoRGBOndulatorio();
  }

  for (int i = 0; i < numJogadores; i++) {
    bool leitura = digitalRead(botoes[i]);

    if (leitura != ultimoEstado[i]) {
      ultimoTempoDebounce[i] = millis();
    }

    if ((millis() - ultimoTempoDebounce[i]) > DEBOUNCE_DELAY) {
      if (leitura != estadoAtual[i]) {
        estadoAtual[i] = leitura;

        if (estadoAtual[i] == LOW) {
          if (jogoEncerrado && i == 0) {
            resetGame();
          } else if (!jogoEncerrado) {
            if (i == vezJogador && !esperandoProximoJogador) {
              lcd1.clear();
              jogarDado(i);
              esperandoProximoJogador = true;
            } else if (esperandoProximoJogador && i == (vezJogador + 1) % numJogadores) {
              vezJogador = (vezJogador + 1) % numJogadores;
              esperandoProximoJogador = false;
              efeitoRGBAtivo = false;
              lcd1.clear();
              printCentered(String("Jogador ") + String(vezJogador + 1) + " vez!", 0);
              printCentered("Aperte botao!", 1);
              mostrarLedJogador(vezJogador);
            }
          }
        }
      }
    }

    ultimoEstado[i] = leitura;
  }
}